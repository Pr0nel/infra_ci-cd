name: CI/CD Pipeline for Multi-Cloud Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite ejecutar manualmente el pipeline desde GitHub

env:
  CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER }}  # AWS, Azure o GCP
  TF_VAR_region: ${{ secrets.TF_VAR_REGION }}    # Región específica de la nube
  TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}  # Nombre del bucket u otros recursos
  TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}  # Nombre del bucket donde Terraform guarda su estado (permanente)
  PROJECT_REPO_URL: "https://github.com/Pr0nel/databricks-poc"
  PROJECT_VERSION: "v1.0.0"  # Versión específica del proyecto

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # Paso 1: Checkout del código de infraestructura
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4

      # Paso 2: Validar proveedor de nube
      - name: Validate Cloud Provider
        run: |
          set -euo pipefail
          if [[ ! "${{ env.CLOUD_PROVIDER }}" =~ ^(aws|azure|gcp)$ ]]; then
            echo "Error: CLOUD_PROVIDER debe ser 'aws', 'azure' o 'gcp'"
            exit 1
          fi
          echo "Proveedor de nube válido: ${{ env.CLOUD_PROVIDER }}"

      # Paso 3: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Paso 4: Instalar herramientas comunes
      - name: Install Common Tools
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq curl unzip
          echo "Herramientas instaladas correctamente"

      # Paso 5: Definir la nube a usar

      # Configuración específica para AWS
      - name: Configure AWS CLI
        if: env.CLOUD_PROVIDER == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_region }}

      - name: Setup AWS Backend Bucket
        if: env.CLOUD_PROVIDER == 'aws'
        run: |
          set -euo pipefail
          echo "Configurando bucket de backend para Terraform..."
          
          BUCKET_NAME="${{ env.TF_BACKEND_BUCKET }}"
          REGION="${{ env.TF_VAR_region }}"
          DYNAMODB_TABLE="${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"
          
          if aws s3 ls s3://${BUCKET_NAME} &>/dev/null; then
            echo "Bucket ${BUCKET_NAME} ya existe"
          else
            echo "Creando bucket ${BUCKET_NAME}..."
            aws s3 mb s3://${BUCKET_NAME} --region ${REGION}
            aws s3api put-bucket-versioning \
              --bucket ${BUCKET_NAME} \
              --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption \
              --bucket ${BUCKET_NAME} \
              --server-side-encryption-configuration '{
                "Rules": [{
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }]
              }'
            echo "Bucket S3 creado exitosamente"
          fi
          if aws dynamodb describe-table --table-name ${DYNAMODB_TABLE} --region ${REGION} &>/dev/null; then
            echo "Tabla DynamoDB ${DYNAMODB_TABLE} ya existe"
          else
            echo "Creando tabla DynamoDB ${DYNAMODB_TABLE}..."
            aws dynamodb create-table \
              --table-name ${DYNAMODB_TABLE} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${REGION}
            echo "Esperando que la tabla esté disponible..."
            aws dynamodb wait table-exists --table-name ${DYNAMODB_TABLE} --region ${REGION}
            echo "Tabla DynamoDB creada exitosamente"
          fi

      - name: Validate AWS Credentials
        if: env.CLOUD_PROVIDER == 'aws'
        run: |
          set -euo pipefail
          echo "Validando credenciales de AWS..."
          aws sts get-caller-identity
          echo "Credenciales de AWS validadas"

      # Configuración específica para Azure
      - name: Azure Login
        if: env.CLOUD_PROVIDER == 'azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Azure Backend Storage
        if: env.CLOUD_PROVIDER == 'azure'
        run: |
          set -euo pipefail
          echo "Configurando storage de backend para Terraform..."
          
          RESOURCE_GROUP="${{ secrets.TF_BACKEND_RESOURCE_GROUP }}"
          STORAGE_ACCOUNT="${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}"
          CONTAINER_NAME="tfstate"
          LOCATION="${{ env.TF_VAR_region }}"
          
          if az group show --name ${RESOURCE_GROUP} &>/dev/null; then
            echo "Resource Group ${RESOURCE_GROUP} ya existe"
          else
            echo "Creando Resource Group ${RESOURCE_GROUP}..."
            az group create --name ${RESOURCE_GROUP} --location ${LOCATION}
            echo "Resource Group creado exitosamente"
          fi
          if az storage account show --name ${STORAGE_ACCOUNT} --resource-group ${RESOURCE_GROUP} &>/dev/null; then
            echo "Storage Account ${STORAGE_ACCOUNT} ya existe"
          else
            echo "Creando Storage Account ${STORAGE_ACCOUNT}..."
            az storage account create \
              --name ${STORAGE_ACCOUNT} \
              --resource-group ${RESOURCE_GROUP} \
              --location ${LOCATION} \
              --sku Standard_LRS \
              --encryption-services blob
            echo "Storage Account creado exitosamente"
          fi
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group ${RESOURCE_GROUP} \
            --account-name ${STORAGE_ACCOUNT} \
            --query '[0].value' -o tsv)
          
          if az storage container show \
            --name ${CONTAINER_NAME} \
            --account-name ${STORAGE_ACCOUNT} \
            --account-key ${ACCOUNT_KEY} &>/dev/null; then
            echo "Container ${CONTAINER_NAME} ya existe"
          else
            echo "Creando Container ${CONTAINER_NAME}..."
            az storage container create \
              --name ${CONTAINER_NAME} \
              --account-name ${STORAGE_ACCOUNT} \
              --account-key ${ACCOUNT_KEY}
            echo "Container creado exitosamente"
          fi

      - name: Validate Azure Credentials
        if: env.CLOUD_PROVIDER == 'azure'
        run: |
          set -euo pipefail
          echo "Validando credenciales de Azure..."
          az account show
          echo "Credenciales de Azure validadas"

      # Configuración específica para GCP
      - name: Authenticate to Google Cloud
        if: env.CLOUD_PROVIDER == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud CLI
        if: env.CLOUD_PROVIDER == 'gcp'
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup GCP Backend Bucket
        if: env.CLOUD_PROVIDER == 'gcp'
        run: |
          set -euo pipefail
          echo "Iniciando configuración del backend..."
          BUCKET_NAME="${{ env.TF_BACKEND_BUCKET }}"
          LOCATION="${{ env.TF_VAR_region }}"
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          echo "Configurando bucket de backend..."
          if gsutil ls "gs://${BUCKET_NAME}" &>/dev/null; then
            echo "Bucket gs://${BUCKET_NAME} ya existe"
          else
            echo "Creando bucket gs://${BUCKET_NAME}..."
            gsutil mb -p "${PROJECT_ID}" -l "${LOCATION}" "gs://${BUCKET_NAME}"
            gsutil versioning set on "gs://${BUCKET_NAME}"
            echo "Bucket creado exitosamente"
          fi
          echo "Backend configurado correctamente"

      - name: Verify GCP Authentication
        if: env.CLOUD_PROVIDER == 'gcp'
        run: |
          set -euo pipefail
          echo "Verificando autenticación con GCP..."
          echo "Autenticado como: $(gcloud config get-value account)"
          echo "Proyecto: $(gcloud config get-value project)"
          echo "Región configurada: ${{ env.TF_VAR_region }}"

      # Paso 6: Validar estructura de directorios de Terraform
      - name: Validate Terraform Structure
        run: |
          set -euo pipefail
          if [[ ! -d "terraform/${{ env.CLOUD_PROVIDER }}" ]]; then
            echo "Error: No existe el directorio terraform/${{ env.CLOUD_PROVIDER }}"
            exit 1
          fi
          echo "Estructura de Terraform validada para ${{ env.CLOUD_PROVIDER }}"

      # Paso 7: Inicializar Terraform según el proveedor de nube
      - name: Initialize Terraform
        run: |
          set -euo pipefail
          cd terraform/${{ env.CLOUD_PROVIDER }}
          echo "Inicializando Terraform para ${{ env.CLOUD_PROVIDER }}..."
          case "${{ env.CLOUD_PROVIDER }}" in
            gcp)
              terraform init \
                -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
                -input=false \
                -upgrade \
                -reconfigure
              ;;
            aws)
              terraform init \
                -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
                -backend-config="region=${{ env.TF_VAR_region }}" \
                -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}" \
                -input=false \
                -upgrade \
                -reconfigure
              ;;
            azure)
              terraform init \
                -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" \
                -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP }}" \
                -input=false \
                -upgrade \
                -reconfigure
              ;;
            *)
              echo "❌ Error: Proveedor de nube no soportado: ${{ env.CLOUD_PROVIDER }}"
              exit 1
              ;;
          esac
          echo "Terraform inicializado correctamente con backend remoto"

      # Paso 8: Validar configuración de Terraform
      - name: Validate Terraform Configuration
        run: |
          set -euo pipefail
          cd terraform/${{ env.CLOUD_PROVIDER }}
          terraform validate
          echo "Configuración de Terraform validada"

      # Paso 9: Planificar cambios en la infraestructura
      - name: Terraform Plan
        run: |
          set -euo pipefail
          cd terraform/${{ env.CLOUD_PROVIDER }}
          terraform plan -input=false -out=tfplan
          echo "Plan de Terraform generado"

      # Paso 10: Aplicar cambios en la infraestructura
      - name: Terraform Apply
        run: |
          set -euo pipefail
          cd terraform/${{ env.CLOUD_PROVIDER }}
          terraform apply -input=false tfplan
          echo "Infraestructura desplegada exitosamente"

      # Paso 11: Mostrar salidas de Terraform
      - name: Terraform Outputs
        run: |
          set -euo pipefail
          cd terraform/${{ env.CLOUD_PROVIDER }}
          terraform output -json > ../../terraform_outputs.json
          terraform output
          echo "Outputs de Terraform guardados"

      # Paso 12: Clonar el repositorio del proyecto
      - name: Clone Project Repository & Checkout Specific Version of Project
        run: |
          set -euo pipefail
          git clone ${{ env.PROJECT_REPO_URL }} project-code
          cd project-code
          git checkout ${{ env.PROJECT_VERSION }}
          echo "Código del proyecto clonado y cambiado a versión ${{ env.PROJECT_VERSION }}"

      # Paso 13: Validar y ejecuta scripts de despliegue según el proveedor de nube
      - name: Run Deployment Script
        run: |
          set -euo pipefail
          SCRIPT_PATH="scripts/deploy_${{ env.CLOUD_PROVIDER }}.sh"
          if [[ ! -f "${SCRIPT_PATH}" ]]; then
            echo "Error: No existe el script de despliegue ${SCRIPT_PATH}"
            exit 1
          fi
          echo "Verificando la sintaxis del script..."
          bash -n "${SCRIPT_PATH}"
          if [[ ! -x "${SCRIPT_PATH}" ]]; then
            echo "Haciendo ejecutable el script de despliegue..."
            chmod +x "${SCRIPT_PATH}"
          fi
          echo "Script de despliegue validado: ${SCRIPT_PATH}"
          echo "Ejecutando despliegue para ${{ env.CLOUD_PROVIDER }}..."
          bash "${SCRIPT_PATH}"
          echo "Despliegue para ${{ env.CLOUD_PROVIDER }} completado"

      # Paso 14: Cleanup
      - name: Cleanup Temporary Files
        if: always()
        run: |
          set +e 
          echo "Limpiando archivos temporales..."
          if [[ -f /tmp/gcp_credentials.json ]]; then
            rm -f /tmp/gcp_credentials.json
          fi
          if [[ -f terraform/${{ env.CLOUD_PROVIDER }}/tfplan ]]; then
            rm -f terraform/${{ env.CLOUD_PROVIDER }}/tfplan
          fi
          echo "Limpieza completada"